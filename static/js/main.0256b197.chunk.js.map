{"version":3,"sources":["components/ui/StatForm.jsx","state/actions/index.js","components/ComparisonPlayerStatForm.jsx","state/selectors/index.js","components/ui/ItemStatForm.jsx","components/ComparisonItemStatForm.jsx","components/PlayerStatForm.jsx","components/Results.jsx","App.jsx","serviceWorker.js","state/reducers/index.js","index.js"],"names":["StatForm","react_default","a","createElement","React","Component","ActionTypes","connect","state","stats","comparisonStats","player","getComparisonPlayerStats","dispatch","setComparisonPlayerStats","values","Object","objectSpread","type","ItemStatForm","item","getComparisonItemStats","setComparisonItemStats","getPlayerStats","setPlayerStats","ResultsUi","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","results","getResults","Calculator","Fragment","PlayerStatForm","ComparisonPlayerStatForm","ComparisonItemStatForm","Results","Boolean","window","location","hostname","match","reducer","combineReducers","action","playerStats","store","createStore","ReactDOM","render","es","App_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEqBA,mLAEb,OAAOC,EAAAC,EAAAC,cAAA,8BAFuBC,IAAMC,kBCF/BC,EACS,mBADTA,EAEoB,8BAFpBA,EAGkB,4BAHlBA,EAIO,iBCSLC,cARS,SAAAC,GAAK,MAAK,CAC9BC,MCFoC,SAACD,GACrC,OAAOA,EAAME,gBAAgBC,ODCtBC,CAAyBJ,KAGT,SAAAK,GAAQ,MAAK,CACpCC,yBAA0B,SAAAL,GAAK,OAAII,GDIEE,ECJgCN,EDK9DO,OAAAC,EAAA,EAAAD,CAAA,CACHE,KAAMZ,GACHS,KAH6B,IAACA,KCD1BR,CAGbP,GEdmBmB,mLAEb,OAAOlB,EAAAC,EAAAC,cAAA,8BAF2BC,IAAMC,WCWjCE,cARS,SAAAC,GAAK,MAAK,CAC9BC,MFNkC,SAACD,GACnC,OAAOA,EAAME,gBAAgBU,KEKtBC,CAAuBb,KAGP,SAAAK,GAAQ,MAAK,CACpCS,uBAAwB,SAAAb,GAAK,OAAII,GJWEE,EIX8BN,EJY1DO,OAAAC,EAAA,EAAAD,CAAA,CACHE,KAAMZ,GACHS,KAH2B,IAACA,KIRxBR,CAGbY,GCHaZ,cARS,SAAAC,GAAK,MAAK,CAC9BC,MHE0B,SAACD,GAC3B,OAAOA,EAAMC,MGHNc,CAAef,KAGC,SAAAK,GAAQ,MAAK,CACpCW,eAAgB,SAAAf,GAAK,OAAII,GLHEE,EKGsBN,ELF1CO,OAAAC,EAAA,EAAAD,CAAA,CACHE,KAAMZ,GACHS,KAHmB,IAACA,KKMhBR,CAGbP,GCZWyB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAT,OAAAW,EAAA,EAAAX,CAAAY,KAAAH,GAAAT,OAAAa,EAAA,EAAAb,CAAAY,KAAAZ,OAAAc,EAAA,EAAAd,CAAAS,GAAAM,MAAAH,KAAAI,YAAA,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAAS,EAAAC,GAAAV,OAAAkB,EAAA,EAAAlB,CAAAS,EAAA,EAAAU,IAAA,SAAAC,MAAA,WAEQ,OAAOnC,EAAAC,EAAAC,cAAA,0BAFfsB,EAAA,CAA+BrB,IAAMC,WAUtBE,cAJS,SAAAC,GAAK,MAAK,CAC9BC,MJCsB,SAACD,GACvB,OAAOA,EAAM6B,QIFNC,CAAW9B,KAGPD,CAEbkB,GCVmBc,mLAEb,OACItC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACIvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,cAPwBxC,IAAMC,WCM1BwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IA6BaC,EAAUC,YAAgB,CACnCzC,gBA9B2B,SAACF,EAAO4C,GACnC,OAAQA,EAAOlC,MACX,KAAKZ,EAEL,KAAKA,EAEL,QACI,OAAOE,IAwBf6C,YApBuB,SAAC7C,EAAO4C,GAC/B,OAAQA,EAAOlC,MACX,KAAKZ,EAEL,QACI,OAAOE,IAgBf6B,QAZmB,SAAC7B,EAAO4C,GAC3B,OAAQA,EAAOlC,MACX,KAAKZ,EAEL,QACI,OAAOE,MCnBb8C,EAAQC,YAAYL,GAE1BM,IAASC,OACLxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAUJ,MAAOA,GACbrD,EAAAC,EAAAC,cAACwD,EAAD,OAELC,SAASC,eAAe,SFkHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0256b197.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class StatForm extends React.Component {\r\n    render() {\r\n        return <div>StatForm</div>;\r\n    }\r\n}","export const ActionTypes = {\r\n    SET_PLAYER_STATS: 'SET_PLAYER_STATS',\r\n    SET_COMPARISON_PLAYER_STATS: 'SET_COMPARISON_PLAYER_STATS',\r\n    SET_COMPARISON_ITEM_STATS: 'SET_COMPARISON_ITEM_STATS',\r\n    UPDATE_RESULTS: 'UPDATE_RESULTS',\r\n}\r\n\r\nexport const setPlayerStats = (values) => {\r\n    return {\r\n        type: ActionTypes.SET_PLAYER_STATS,\r\n        ...values,\r\n    };\r\n};\r\n\r\nexport const setComparisonPlayerStats = (values) => {\r\n    return {\r\n        type: ActionTypes.SET_COMPARISON_PLAYER_STATS,\r\n        ...values,\r\n    };\r\n};\r\n\r\nexport const setComparisonItemStats = (values) => {\r\n    return {\r\n        type: ActionTypes.SET_COMPARISON_ITEM_STATS,\r\n        ...values,\r\n    };\r\n};\r\n\r\nexport const setResults = (results) => {\r\n    return {\r\n        type: ActionTypes.UPDATE_RESULTS,\r\n        ...results,\r\n    };\r\n};","import { connect } from 'react-redux'\r\nimport StatForm  from './ui/StatForm';\r\nimport { setComparisonPlayerStats } from '../state/actions';\r\nimport { getComparisonPlayerStats } from '../state/selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    stats: getComparisonPlayerStats(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setComparisonPlayerStats: stats => dispatch(setComparisonPlayerStats(stats)),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StatForm);","export const getComparisonItemStats = (state) => {\r\n    return state.comparisonStats.item;\r\n};\r\n\r\nexport const getComparisonPlayerStats = (state) => {\r\n    return state.comparisonStats.player;\r\n};\r\n\r\nexport const getPlayerStats = (state) => {\r\n    return state.stats;\r\n};\r\n\r\nexport const getResults = (state) => {\r\n    return state.results;\r\n};","import React from 'react';\r\n\r\nexport default class ItemStatForm extends React.Component {\r\n    render() {\r\n        return <div>ItemForm</div>;\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport ItemStatForm from './ui/ItemStatForm';\r\nimport { setComparisonItemStats } from '../state/actions';\r\nimport { getComparisonItemStats } from '../state/selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    stats: getComparisonItemStats(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setComparisonItemStats: stats => dispatch(setComparisonItemStats(stats)),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ItemStatForm);","import { connect } from 'react-redux'\r\nimport StatForm from './ui/StatForm';\r\nimport { setPlayerStats } from '../state/actions';\r\nimport { getPlayerStats } from '../state/selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    stats: getPlayerStats(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPlayerStats: stats => dispatch(setPlayerStats(stats)),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StatForm);","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { getResults } from '../state/selectors';\r\n\r\nexport class ResultsUi extends React.Component {\r\n    render() {\r\n        return <div>Results</div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    stats: getResults(state),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(ResultsUi);","import React from 'react';\r\nimport ComparisonPlayerStatForm from './components/ComparisonPlayerStatForm';\r\nimport ComparisonItemStatForm from './components/ComparisonItemStatForm';\r\nimport PlayerStatForm from './components/PlayerStatForm';\r\nimport Results from './components/Results';\r\n\r\nexport default class Calculator extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <PlayerStatForm />\r\n                <ComparisonPlayerStatForm />\r\n                <ComparisonItemStatForm />\r\n                <Results />\r\n            </>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { ActionTypes } from '../actions';\r\n\r\nconst comparisonStatsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SET_COMPARISON_ITEM_STATS:\r\n            return state;\r\n        case ActionTypes.SET_COMPARISON_PLAYER_STATS:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst playerStatsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SET_PLAYER_STATS:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst resultsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_RESULTS:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const reducer = combineReducers({\r\n    comparisonStats: comparisonStatsReducer,\r\n    playerStats: playerStatsReducer,\r\n    results: resultsReducer,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}