{"version":3,"sources":["components/Results.jsx","components/forms/ui/ItemForm.jsx","components/forms/ui/StatForm.jsx","components/forms/ComparisonStatForm.jsx","components/forms/ItemComparisonForm.jsx","components/forms/PlayerStatForm.jsx","components/Calculator.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Results","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","React_default","a","createElement","React","Component","ItemForm","StatForm","ComparisonStatForm","StatForm_StatForm","ItemComparisonForm","ItemForm_ItemForm","PlayerStatForm","Calculator","Fragment","PlayerStatForm_PlayerStatForm","ComparisonStatForm_ComparisonStatForm","ItemComparisonForm_ItemComparisonForm","Results_Results","App","Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","react_default","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b096725f.chunk.js","sourcesContent":["import React from 'React';\r\n\r\nexport class Results extends React.Component {\r\n    render() {\r\n        return <div>Results</div>;\r\n    }\r\n}","import React from 'React';\r\n\r\nexport class ItemForm extends React.Component {\r\n    render() {\r\n        return <div>ItemForm</div>;\r\n    }\r\n}","import React from 'React';\r\n\r\nexport class StatForm extends React.Component {\r\n    render() {\r\n        return <div>StatForm</div>;\r\n    }\r\n}","import React from 'React';\r\nimport { StatForm } from './ui';\r\n\r\nexport class ComparisonStatForm extends React.Component {\r\n    render() {\r\n        return <StatForm />;\r\n    }\r\n}","import React from 'React';\r\nimport { ItemForm } from './ui';\r\n\r\nexport class ItemComparisonForm extends React.Component {\r\n    render() {\r\n        return <ItemForm />;\r\n    }\r\n}","import React from 'React';\r\nimport { StatForm } from './ui';\r\n\r\nexport class PlayerStatForm extends React.Component {\r\n    render() {\r\n        return <StatForm />;\r\n    }\r\n}","import React from 'React';\r\nimport { Results } from './Results.jsx';\r\nimport { ComparisonStatForm, ItemComparisonForm, PlayerStatForm } from './forms';\r\n\r\nexport class Calculator extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <PlayerStatForm />\r\n                <ComparisonStatForm />\r\n                <ItemComparisonForm />\r\n                <Results />\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'React';\r\nimport { Calculator } from './Calculator';\r\n\r\nexport class App extends React.Component {\r\n    render() {\r\n        return <Calculator />\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}